package com.skillrock.communication;

import java.util.Date;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class SMTPMailService {

	private static final Logger logger = LogManager.getLogger(SMTPMailService.class);
    private static SMTPMailService instance;

	private SMTPMailService() {
	}

	public static SMTPMailService getInstance() {
		if (instance == null)
			instance = new SMTPMailService();
		return instance;
	}

	public void sendMail(String fromEmail, String fromName, String toEmail, String replyTo, String subject, String body,
						 String smtpHost) {
		sendMail(fromEmail, fromName, toEmail, replyTo, subject, body, smtpHost, null, null);
	}


	public void sendMail(String fromEmail, String fromName, String toEmail, String replyTo, String subject, String body,
						 String smtpHost, String gmail, String gmailPassword) {
		Session session;
		try {
			logger.info("Inside SMTP service...........");
			logger.info("fromEmail: "+fromEmail+",toEmail: "+toEmail+",subject: "+subject);
			Properties props = new Properties();
			props.put("mail.smtp.host", smtpHost);

			if ("smtp.gmail.com".equals(smtpHost))
				session = SMTPMailService.getInstance().getSMTPSession(props, true, gmail, gmailPassword);
			else
				session = SMTPMailService.getInstance().getSMTPSession(props, false);


			MimeMessage message = new MimeMessage(session);
			message.setFrom(new InternetAddress(fromEmail, fromName));
			message.setReplyTo(InternetAddress.parse(replyTo, false));
			message.setSentDate(new Date());
			message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));

			message.setText(body, "UTF-8");
			message.setContent(body, "text/html");
			message.setSentDate(new Date());
			message.setSubject(subject, "UTF-8");
			Transport.send(message);
			logger.info("SMTP mail sent SUCCESS....");
		} catch (Exception e) {
			logger.error(e);
			logger.info("SMTP mail sent FAILED....");
		}

	}

	public Session getSMTPSession(Properties props, boolean senderAuth) {
		return getSMTPSession(props, senderAuth, null, null);
	}


	public Session getSMTPSession(Properties props, boolean senderAuth, final String gmail, final String gmailPassword) {
		if (senderAuth) {
			props.put("mail.smtp.starttls.enable", "true");
			props.put("mail.smtp.auth", "true");
			props.put("mail.smtp.port", "587");
			return Session.getInstance(props, new javax.mail.Authenticator() {
				protected PasswordAuthentication getPasswordAuthentication() {
					return new PasswordAuthentication(gmail, gmailPassword);
			}
			});
		} else {
			return Session.getInstance(props, null);
		}
	}
}
